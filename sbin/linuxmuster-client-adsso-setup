#!/usr/bin/python3
#
# /usr/sbin/linuxmuster-client-adsso-setup
#
# thomas@linuxmuster.net
# 20181121
#

import codecs
import os
import re
import sys
from subprocess import PIPE, run


## functions - begin

# get output of system command
def output(command):
    result = run(command, stdout=PIPE, stderr=PIPE, universal_newlines=True, shell=True)
    return result.stdout.replace('\n','')
    # return content of text file

# print with or without linefeed
def printr(msg):
    print(msg, end='', flush=True)

# read textfile in variable
def readTextfile(tfile):
    if not os.path.isfile(tfile):
        return False, None
    try:
        infile = codecs.open(tfile ,'r', encoding='utf-8', errors='ignore')
        content = infile.read()
        infile.close()
        return True, content
    except:
        print('Cannot read ' + tfile + '!')
        return False, None

# remove lines beginning with #
def stripComment(filedata):
    filedata_stripped = ''
    for line in filedata.split('\n'):
        if line[:1] == '#':
            continue
        else:
            if filedata_stripped == '':
                filedata_stripped = line
            else:
                filedata_stripped = filedata_stripped + '\n' + line
    return filedata_stripped

## functions - end

print('\n#### linuxmuster-client-adsso-setup ####\n')

print('Trying to get network information:')

iface = output("nmcli -t c | grep ethernet | head -1 | awk -F\: '{ print $4 }'")
serverip = output("nmcli -f IP4.DNS device show " + iface + " | head -1 | awk '{ print $2 }'")
address = output("nmcli -f IP4.ADDRESS device show " + iface + " | head -1 | awk '{ print $2 }'")
hostip = address.split('/')[0]
network = output("ipcalc " + address + " | grep ^Network | awk '{ print $2 }'")
domainname = output("nmcli -f IP4.DOMAIN device show " + iface + " | head -1 | awk '{ print $2 }'")
servername = output("host " + serverip + " | awk '{ print $5}'").split('.')[0]
hostname = output("host " + hostip + " " + serverip + " | grep 'in-addr.arpa' | awk '{ print $5}'").split('.')[0]
sambadomain = domainname.split('.')[0].upper()
realm = domainname.upper()
proxy_url = 'http://firewall.' + domainname + ':3128'

print('Hostname: ' + hostname + '.' + domainname)
print('Servername: ' + servername + '.' + domainname)
print('REALM: ' + realm)

if domainname == '':
    print('Cannot determine domainname!')
    sys.exit(1)

if servername == '':
    print('Cannot determine servername!')
    sys.exit(1)

if hostname == '':
    print('Cannot determine hostname!')
    sys.exit(1)


print('\nProcessing configuration templates:')

tpldir = '/usr/share/linuxmuster-client-adsso/templates'
for f in os.listdir(tpldir):
    source = tpldir + '/' + f
    print('* ' + f)
    try:
        # read template file
        rc, filedata = readTextfile(source)
        # replace placeholders with values
        filedata = filedata.replace('@@network@@', network)
        filedata = filedata.replace('@@hostname@@', hostname)
        filedata = filedata.replace('@@serverip@@', serverip)
        filedata = filedata.replace('@@servername@@', servername)
        filedata = filedata.replace('@@domainname@@', domainname)
        filedata = filedata.replace('@@proxy_url@@', proxy_url)
        filedata = filedata.replace('@@realm@@', realm)
        filedata = filedata.replace('@@sambadomain@@', sambadomain)
        # get target path
        firstline = filedata.split('\n')[0]
        target = firstline.partition(' ')[2]
        # create target directory
        os.system('mkdir -p ' + os.path.dirname(target))
        # remove comment lines beginning with # from .xml files
        if target.endswith('.xml'):
            filedata = stripComment(filedata)
        # remove target path from shebang line
        if '#!/bin/sh' in firstline or '#!/bin/bash' in firstline:
            filedata = filedata.replace(' ' + target, '\n# ' + target)
            xbit = True
        else:
            xbit = False
        # write config file
        with open(target, 'w') as outfile:
            outfile.write(filedata)
        # make bash scripts executable
        if xbit:
            os.system('chmod +x ' + target)
    except:
        print(' Failed!')
        sys.exit(1)

# deleting krb5.keytab file, if existent
printr('\nDeleting krb5.keytab if it exists ... ')
if os.path.exists("/etc/krb5.keytab"):
    os.unlink("/etc/krb5.keytab")

# set permissions on sssd.conf
printr('\nSetting sssd.conf permissions ... ')
os.system('chmod 600 /etc/sssd/sssd.conf')
print('Done!')

# write hostname file
printr('Writing hostname ... ')
with open('/etc/hostname', 'w') as outfile:
    outfile.write(hostname + '.' + domainname)
print('Done!')

# make sure, /etc/pam.d/lightdm includes linuxmuster-session instead of common-session
printr('Replacing common-session in pam.d/lightdm if necessary ...')
os.system('sed -i "s/.*common-session.*/@include linuxmuster-session/" /etc/pam.d/lightdm')

# enable necessary pam modules
printr('Updating pam configuration ... ')
os.system('pam-auth-update --package --enable libpam-mount mkhomedir pwquality sss --force')
os.system('pam-auth-update --package --remove krb5 --force')

# path for sysvol share
printr('Creating sysvol folder ... ')
os.system('mkdir -p /var/lib/samba/sysvol')
print('Done!')

# enable login scripts
printr('Enabling login scripts ... ')
link_target = '/etc/X11/xinit/xinitrc.d/99linuxmuster.net'
link_source = '/etc/linuxmuster-client/scripts/login.sh'
os.system('mkdir -p ' + os.path.dirname(link_target))
os.system('ln -sf ' + link_source + ' ' + link_target)

# sudo for global-admin
printr('Sudo for global-admin ... ')
config = '/etc/sudoers.d/global-admin'
content = 'global-admin ALL=NOPASSWD: ALL'
os.system('mkdir -p ' + os.path.dirname(config))
with open(config, 'w') as outfile:
    outfile.write(content)
os.system('chmod 400 ' + config)
print('Done!')

print('\nEnabling services:')
services = ['linuxmuster-client-adsso', 'smbd', 'nmbd', 'sssd']
for service in services:
    os.system('systemctl enable ' + service + '.service')

print('\nRestarting services:')
services = ['smbd', 'nmbd']
for service in services:
    os.system('systemctl restart ' + service + '.service')

# samba domain join
print('\n#### Joining domain ' + sambadomain + '.')
print('#### Note that you have to input the password of the global-admin.\n')
try:
    os.system('kinit global-admin')
except:
    print('Failed!')
    sys.exit(1)
try:
    os.system('net ads join --no-dns-updates -k')
except:
    print('Failed!')
    sys.exit(1)

# copy server certificate in place
printr('\nInstalling server certificate ... ')
sysvol_path = '/var/lib/samba/sysvol'
cacert_server_path = sysvol_path + '/' + domainname + '/tls/cacert.pem'
cacert_client_path = '/var/lib/samba/private/tls/' + domainname + '.pem'
os.system('mkdir -p ' + sysvol_path)
os.system('mkdir -p "$(dirname ' + cacert_client_path + ')"')
os.system('mount -o sec=krb5,user=global-admin //' + domainname + '/sysvol ' + sysvol_path)
os.system('cp ' + cacert_server_path + ' ' + cacert_client_path)
os.system('umount ' + sysvol_path)
if os.path.isfile(cacert_client_path):
    print('Success!')
else:
    print('Failed!')
    sys.exit(1)

print('\nAll done! Now reboot the client, please.\n')
